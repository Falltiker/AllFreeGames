import requests
import json
import logging
from datetime import datetime

def get_free_epic_games(locale="ru", country="UA"):
    logging.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä –∏–∑ Epic Games Store.")
    url = "https://store-site-backend-static.ak.epicgames.com/freeGamesPromotions"
    params = {
        "locale": locale,
        "country": country,
        "allowCountries": country
    }

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç API.")
    except requests.RequestException as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Epic Games.")
        raise

    with open("1.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)
        logging.debug("–î–∞–Ω–Ω—ã–µ API —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 1.json –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.")

    games = data['data']['Catalog']['searchStore']['elements']
    free_games = []

    for i, game in enumerate(games, start=1):
        title = game.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        logging.debug(f"[{i}] –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∏–≥—Ä–∞: {title}")

        if "Mystery Game" in title or "LISA: Definitive Edition" in title:
            logging.debug(f"[{i}] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ Mystery Game.")
            continue

        image = [img.get("url") for img in game.get("keyImages", [])]
        if not image:
            logging.warning(f"[{i}] –£ –∏–≥—Ä—ã '{title}' –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")


        slug = game.get("productSlug")
        logging.debug(f"[{i}] –£ –∏–≥—Ä—ã '{title}' productSlug = {slug}.")

        categories = game.get("categories", [])
        category = categories[0]["path"] if categories else "unknown"

        if slug:
            url = f"https://store.epicgames.com/ru/{'bundles' if category == 'bundles' else 'p'}/{slug}"
        else:
            logging.warning(f"[{i}] –£ –∏–≥—Ä—ã '{title}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç productSlug.")
            continue
            url = None

        description = game.get("description", "")


        # –ß–∏—Å–ª–∞ –≤ –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è
        # –ü–æ–∫–∞ —á—Ç–æ, –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

        # start = game.get("effectiveDate")
        # end = game.get("expiryDate")

        # if not start or not end:
        #     logging.info(f"[{i}] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ '{title}' ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç effectiveDate –∏–ª–∏ expiryDate.")
        #     continue

        # try:
        #     start_fmt = datetime.fromisoformat(start.replace("Z", "+00:00")).strftime("%d.%m.%Y")
        #     end_fmt = datetime.fromisoformat(end.replace("Z", "+00:00")).strftime("%d.%m.%Y")
        # except Exception as e:
        #     logging.warning(f"[{i}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç —É '{title}': {e}")
        #     start_fmt = end_fmt = "?"

        free_games.append({
            "title": title,
            "image": image,
            "description": description,
            "url": url
            # "start_date": start_fmt,
            # "end_date": end_fmt
        })
        logging.info(f"[{i}] –ò–≥—Ä–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫")

    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(free_games)} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä.")

    # Markdown
    md = "## üéÆ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ Epic Games Store\n\n"
    md += "| –ò–≥—Ä–∞ | –î–∞—Ç—ã —Ä–∞–∑–¥–∞—á–∏ | –°—Å—ã–ª–∫–∞ |\n|------|----------------|--------|\n"
    for g in free_games:
        md += f"| {g['title']} | [–∫–∞—Ä—Ç–∏–Ω–∫–∞]({g['image'][0] if g['image'] else '–Ω–µ—Ç'}) | [–°—Å—ã–ª–∫–∞]({g['url']}) |\n"

    return free_games, md
